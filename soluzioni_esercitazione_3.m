%esercitazione 3: sistemi lineari

clear all
close all
clc
format long e
disp('***********************************************')
disp('*****************esercizio_3_1*****************')
disp('***********************************************')

i = 1;
ordine = 5:5:15;
for n = ordine
    A = hilb(n);
    Kinf(i) = cond(A,inf);
    b = sum(A,2);
    x = A\b
    err(i) = norm(ones(n,1)-x,inf)/norm(ones(n,1),inf);
    i = i+1;
end
[ordine' err' Kinf']
disp('**********************************************FINE ESERCIZIO**********************************************')
pause
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all
close all
clc
disp('***********************************************')
disp('*****************esercizio_3_2*****************')
disp('***********************************************')

n = 100;
for i = 1:n
    for j = 1:n
        A(i,j) = max([i j]);
    end
end
Kinf = cond(A,inf)
b = sum(A,2);
[L,U] = elleu(A);
y = L\b;
x_nopiv = U\y;
err_nopiv = norm(ones(n,1)-x_nopiv)/norm(ones(n,1))

[L,U,P] = lu(A);
y = L\(P*b);
x_piv = U\y;
err_piv = norm(ones(n,1)-x_piv)/norm(ones(n,1))
%la soluzione ottenuta mediante il metodo dell'eliminazione di
%Gauss con il pivoting è più accurata di quella ottenuta
%senza pivoting

disp('**********************************************FINE ESERCIZIO**********************************************')
pause
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all
close all
clc
disp('***********************************************')
disp('*****************esercizio_3_3*****************')
disp('***********************************************')

n = 100;
for i = 1:n
    for j = 1:n
        A(i,j) = i*max([i j]);
    end
end
determinante = det(A)
[L,U,P] = lu(A);
inversa_c = inv(U)*inv(L)*P;
inversa = inv(A);
err = norm(inversa-inversa_c,inf)
%per verificare che le due matrici siano
%numericamente equivalenti, verifico che
%la matrice errore in norma infinito 
%sia circa uguale o minore della precisione 
%di macchina
disp('**********************************************FINE ESERCIZIO**********************************************')
pause
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all
close all
clc

disp('***********************************************')
disp('*****************esercizio_3_4*****************')
disp('***********************************************')

p = 30;
n = 100;
A = rand(n);
b = sum(A,2);
%definisco una matrice di dimensioni n per p, nella cui colonna
%i-esima memorizzo il vettore soluzione dell'i-esimo sistema
x = zeros(n,p); 
tic
[L,U,P] = lu(A);
tn = P*b;
for i = 1:p
    x(:,i) = U\(L\tn);
    tn = P*x(:,i);
end
toc

tic
x(:,1) = A\b;
for i = 2:p
    x(:,i) = A\x(:,i-1);
end
toc
x

disp('**********************************************FINE ESERCIZIO**********************************************')
pause
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all
close all
clc

disp('***********************************************')
disp('*****************esercizio_3_5*****************')
disp('***********************************************')

p = 4;
n = 100;
A = rand(100);
[L,U,P] = lu(A);
b = sum(A^4,2);
x = zeros(n,p);
tn = P*b;
for i = 1:p
     v = L\tn;
     x(:,i) = U\v;
     tn = P*x(:,i);
end
u = ones(n,1);
err = norm(u-x(:,end))
disp('**********************************************FINE ESERCIZIO**********************************************')
pause
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all
close all
clc
disp('***********************************************')
disp('*****************esercizio_3_6*****************')
disp('***********************************************')

n = 100;
B = diag(10*ones(n,1))+diag(5*ones(n-1,1),1)+diag(-5*ones(n-1,1),-1);
determinante = det(B)
A = B'*B;
Kinf = cond(A,inf)
R = chol(A);
R1 = inv(R);
inversa_c = R1*R1';
inversa = inv(A);
err_inv = norm(inversa-inversa_c,inf)
b = sum(A,2);
y = R'\b;
x = R\y;
err_sol = norm(ones(n,1)-x)
disp('**********************************************FINE ESERCIZIO**********************************************')
pause

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all
close all
clc

disp('***********************************************')
disp('*****************esercizio_3_7*****************')
disp('***********************************************')

clear all
format short e
i = 1;
for n = 1000:1000:5000   %100:100:500
    A = rand(n);
    condizionamento(i) = cond(A);
    b = sum(A,2);
    tic
    [L,U,P] = lu(A);
    y = L\(P*b);
    x = U\y;
    err1(i) = norm(ones(n,1)-x);
    t1 = toc;
    tic
    [Q,R] = qr(A);
    x = R\(Q'*b);
    err2(i) = norm(ones(n,1)-x);
    t2 = toc;
    r(i) = t2/t1;
    i = i+1;
end
[condizionamento' err1' err2' r']

disp('**********************************************FINE ESERCIZIO**********************************************')
pause

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all
close all
clc

disp('***********************************************')
disp('*****************esercizio_3_8*****************')
disp('***********************************************')

format short e
A = [1 2 3 4;-1 0 4 1;3 5 1 0;2 -1 0 1;1 1 -1 1;2 -1 0 3];
b = [1:6]';
[Q,R] = qr(A);
Rt = R(1:4,1:4);
c = Q'*b;
c1 = c(1:4);
cstar = Rt\c1
x = A\b

disp('**********************************************FINE ESERCIZIO**********************************************')
pause

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all
close all
clc

disp('***********************************************')
disp('*****************esercizio_3_9*****************')
disp('***********************************************')

n = 5;
A = zeros(n);
Q = zeros(n);
A(:,1) = [4;2;1;5;-1];
A(:,2) = [1;5;2;4;0];
A(:,3) = [3;10;6;2;1];
A(:,4) = [3;1;6;2;-1];
A(:,5) = [2;-1;2;0;1];
for j = 1:n
    Q(:,j) = A(:,j);
    for i = 1:j-1
        Q(:,j) = Q(:,j)-A(:,j)'*Q(:,i)*Q(:,i);
    end
    Q(:,j) = Q(:,j)/norm(Q(:,j));
end
norm(Q'*Q-eye(5),inf)
disp('**********************************************FINE ESERCIZIO**********************************************')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
